function [result] = calculate_intersection(i1, i2, stereoParams, plane_top_left, plane_top_right, plane_bottom_left)
    close all;

    [arm_properties] = arm_segmenter(i1,i2, stereoParams);

    P1 = reshape(plane_top_left, 1, 3);
    P2 = reshape(plane_top_right, 1, 3);
    P3 = reshape(plane_bottom_left, 1, 3);
%     
%     normal = cross(P1-P2, P1-P3)   
%     
%     syms x y z
%     P = [x,y,z]
%     planefunction = dot(normal, P-P1)
%     
%     dot(P-P1, normal)
%     
%     realdot = @(u, v) u*transpose(v);
%     
%     realdot(P-P1,normal)
    
    % LINE
    
    %P4 = [240,288,vall];
    %P5 = [274,267,ujj];
    
    line_x1 = arm_properties(1,1);
    line_y1 = arm_properties(1,2);
    line_z1 = arm_properties(1,3);
    
    line_x2 = arm_properties(2,1);
    line_y2 = arm_properties(2,2);
    line_z2 = arm_properties(2,3);
    
    P4 = [line_x1, line_y1, line_z1];
    P5 = [line_x2, line_y2, line_z2];
    
    %Emil
    figure
    [normal_test, ~] = plot_line(P1,P2,P3); hold on
    
    normal_test = reshape(normal_test, 1, 3);
    
     v=[P4;P5];
     plot3(v(:,1),v(:,2),v(:,3),'r')
     
     X = (P2 - P1) / norm(P2 - P1);
     N = normal_test / norm(normal_test);
     Y = cross(X,N);
     
     A = P1;
     B = P1 + X;
     C = P1 + Y;
     D = P1 + N;
     
     HH = [A; B; C; D]';
     HH(4,:) = 1;
     
     HH2 = [[0;0;0;1] [1;0;0;1] [0;1;0;1] [0;0;1;1]];
     
     M = inv(HH2) * HH;
     
     R = [X; Y; N] \ [B1; B2; B3];
     
%     
%     [I,~] = plane_line_intersect(normal_test,P1, P4, P5);
%     plot3(I(1),I(2),I(3),'-r*', 'Markersize',20)
%     
%     figure;
%     imshow(I1); hold on;
%     plot(I(1), I(2),'-r*', 'Markersize',20)
%     
%     point = I(1:2);
%     
%     projWidth = 1920;
%     projHeight = 1080;
%     
%     A_x_ratio = proj_tr_pixel(1) - proj_tl_pixel(1);
%     A_y_ratio = proj_bl_pixel(2) - proj_tl_pixel(2);
%     
%     A_x_ratio = A_x_ratio / projWidth;
%     A_y_ratio = A_y_ratio / projHeight;
%     
%     pointXScale = point(1) - proj_tl_pixel(1);
%     pointX = pointXScale/A_x_ratio;
%     
%     pointYScale = point(2) - proj_tl_pixel(2);
%     pointY = pointYScale/A_y_ratio;
%     result = [pointX, pointY];
end